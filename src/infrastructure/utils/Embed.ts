import { ELEMENT_EMOJIS } from "@/application/constants/ElementEmojis";
import { SPECIES_EMOJIS } from "@/application/constants/SpeciesEmojis";
import { ELEMENT_COLORS } from "@/application/constants/ElementColors";
import { BattleStatus } from "@/domain/entities/BattleStatus";
import { Pet } from "@/domain/entities/Pet";
import { EffectTypes } from "@/domain/enums/EffectTypes";
import { IBattleService } from "@/domain/interfaces/services/IBattleService";
import { IEmbedProps } from "mezon-sdk";
import { Skill } from "@domain/entities/Skill";

// Status effect emojis
const STATUS_EMOJIS: { [key: string]: string } = {
    [EffectTypes.BURN]: "üî•",
    [EffectTypes.FREEZE]: "üßä",
    [EffectTypes.PARALYZE]: "‚ö°",
    [EffectTypes.POISON]: "‚ò†Ô∏è",
    [EffectTypes.BLIND]: "üëÅÔ∏è",
    [EffectTypes.SLOW]: "ü¶•",
    [EffectTypes.STUN]: "üí´",
    [EffectTypes.BUFF]: "‚¨ÜÔ∏è",
    [EffectTypes.DEBUFF]: "‚¨áÔ∏è"
};

// Create battle start embed
export function createBattleStartEmbed(attacker: Pet, defender: Pet): IEmbedProps {
    return {
        color: "#3498db",
        title: "‚öîÔ∏è TR·∫¨N ƒê·∫§U PVP B·∫ÆT ƒê·∫¶U",
        description: `**${attacker.name}** vs **${defender.name}**`,
        fields: [
            {
                name: `${SPECIES_EMOJIS[attacker.species] || "üêæ"} ${attacker.name}`,
                value: `C·∫•p ƒë·ªô: ${attacker.level}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `${SPECIES_EMOJIS[defender.species] || "üêæ"} ${defender.name}`,
                value: `C·∫•p ƒë·ªô: ${defender.level}`,
                inline: true
            },
            {
                name: `Lo√†i`,
                value: `${attacker.species.toUpperCase()} ${ELEMENT_EMOJIS[attacker.element]}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `Lo√†i`,
                value: `${defender.species.toUpperCase()} ${ELEMENT_EMOJIS[defender.element]}`,
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${attacker.hp}/${attacker.maxHp}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${defender.hp}/${defender.maxHp}`,
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${attacker.energy}/${attacker.maxEnergy}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${defender.energy}/${defender.maxEnergy}`,
                inline: true
            },
            {
                name: `Nguy√™n t·ªë ph·ª•`,
                value: `${attacker.secondaryElements.map(e => ELEMENT_EMOJIS[e]).join(" ") || "Kh√¥ng c√≥"}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `Nguy√™n t·ªë ph·ª•`,
                value: `${defender.secondaryElements.map(e => ELEMENT_EMOJIS[e]).join(" ") || "Kh√¥ng c√≥"}`,
                inline: true
            }
        ],
        footer: {
            text: "H·ªá th·ªëng chi·∫øn ƒë·∫•u v2.0"
        },
        timestamp: new Date().toISOString()
    };
}

// Create turn status embed
export function createTurnStatusEmbed(attacker: Pet, defender: Pet, turn: number, battleService: IBattleService): IEmbedProps {
    return {
        color: "#f39c12",
        title: `L∆Ø·ª¢T ${turn}`,
        description: "T√¨nh tr·∫°ng tr·∫≠n ƒë·∫•u hi·ªán t·∫°i",
        fields: [
            {
                name: `${SPECIES_EMOJIS[attacker.species] || "üêæ"} ${attacker.name}`,
                value: `**C·∫•p ƒë·ªô:** ${attacker.level}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `${SPECIES_EMOJIS[defender.species] || "üêæ"} ${defender.name}`,
                value: `**C·∫•p ƒë·ªô:** ${defender.level}`,
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${attacker.hp}/${attacker.maxHp}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${defender.hp}/${defender.maxHp}`,
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${attacker.energy}/${attacker.maxEnergy}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${defender.energy}/${defender.maxEnergy}`,
                inline: true
            },
            {
                name: `Hi·ªáu ·ª©ng`,
                value: `${getStatusEffectsString(attacker.statusEffects)}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `Hi·ªáu ·ª©ng`,
                value: `${getStatusEffectsString(defender.statusEffects)}`,
                inline: true
            },
            {
                name: `T·ªëc ƒë·ªô`,
                value: `${battleService.getEffectiveStat(attacker, 'speed').toFixed(2)}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `T·ªëc ƒë·ªô`,
                value: `${battleService.getEffectiveStat(defender, 'speed').toFixed(2)}`,
                inline: true
            }
        ],
        footer: {
            text: `L∆∞·ª£t ${turn} | C√°c k·ªπ nƒÉng hi·ªáu qu·∫£ s·∫Ω g√¢y nhi·ªÅu s√°t th∆∞∆°ng h∆°n!`
        }
    };
}

// Create turn end status embed
export function createTurnEndStatusEmbed(attacker: Pet, defender: Pet): IEmbedProps {
    return {
        color: "#2ecc71",
        title: "üìä C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI",
        fields: [
            {
                name: `${SPECIES_EMOJIS[attacker.species] || "üêæ"} ${attacker.name}`,
                value: `C·∫•p ƒë·ªô: ${attacker.level}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `${SPECIES_EMOJIS[defender.species] || "üêæ"} ${defender.name}`,
                value: `C·∫•p ƒë·ªô: ${defender.level}`,
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${attacker.hp}/${attacker.maxHp}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${defender.hp}/${defender.maxHp}`,
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${attacker.energy}/${attacker.maxEnergy}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${defender.energy}/${defender.maxEnergy}`,
                inline: true
            },
            {
                name: `Hi·ªáu ·ª©ng`,
                value: `${getStatusEffectsString(attacker.statusEffects)}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `Hi·ªáu ·ª©ng`,
                value: `${getStatusEffectsString(defender.statusEffects)}`,
                inline: true
            }
        ],
        footer: {
            text: "Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng l√† ch√¨a kh√≥a ƒë·ªÉ chi·∫øn th·∫Øng!"
        }
    };
}

// Create battle end embed
export function createBattleEndEmbed(winner: Pet, loser: Pet, winnerId: string): IEmbedProps {
    return {
        color: "#27ae60",
        title: "üèÜ K·∫æT QU·∫¢ TR·∫¨N ƒê·∫§U üèÜ",
        description: `**${winner.name}** th·∫Øng tr·∫≠n ƒë·∫•u!`,
        fields: [
            {
                name: `üëë Ng∆∞·ªùi th·∫Øng: ${SPECIES_EMOJIS[winner.species] || "üêæ"} ${winner.name}`,
                value: `**C·∫•p ƒë·ªô:** ${winner.level}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `üíÄ Ng∆∞·ªùi thua: ${SPECIES_EMOJIS[loser.species] || "üêæ"} ${loser.name}`,
                value: `**C·∫•p ƒë·ªô:** ${loser.level}`,
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${winner.hp}/${winner.maxHp}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${loser.hp}/${loser.maxHp}`,
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${winner.energy}/${winner.maxEnergy}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${loser.energy}/${loser.maxEnergy}`,
                inline: true
            },
            {
                name: `Hi·ªáu ·ª©ng`,
                value: `${getStatusEffectsString(winner.statusEffects)}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `Hi·ªáu ·ª©ng`,
                value: `${getStatusEffectsString(loser.statusEffects)}`,
                inline: true
            }
        ],
        footer: {
            text: "Ph·∫ßn th∆∞·ªüng chi·∫øn th·∫Øng: 50 EXP"
        }
    };
}

// Create battle draw embed
export function createBattleDrawEmbed(attacker: Pet, defender: Pet): IEmbedProps {
    return {
        color: "#9b59b6",
        title: "ü§ù K·∫æT QU·∫¢ TR·∫¨N ƒê·∫§U ü§ù",
        description: "H√≤a nhau!",
        fields: [
            {
                name: `${SPECIES_EMOJIS[attacker.species] || "üêæ"} ${attacker.name}`,
                value: `**C·∫•p ƒë·ªô:** ${attacker.level}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `${SPECIES_EMOJIS[defender.species] || "üêæ"} ${defender.name}`,
                value: `**C·∫•p ƒë·ªô:** ${defender.level}`,
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: "\u200B",  // Empty field for spacing
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${attacker.hp}/${attacker.maxHp}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `HP`,
                value: `‚ù§Ô∏è ${defender.hp}/${defender.maxHp}`,
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${attacker.energy}/${attacker.maxEnergy}`,
                inline: true
            },
            {
                name: "\u200B",
                value: "\u200B",
                inline: true
            },
            {
                name: `NƒÉng l∆∞·ª£ng`,
                value: `‚ö°Ô∏è ${defender.energy}/${defender.maxEnergy}`,
                inline: true
            }
        ],
        footer: {
            text: "Tr·∫≠n ƒë·∫•u k√©o d√†i qu√° l√¢u."
        }
    };
}

// Create skill usage embed
export function createSkillUsageEmbed(attackingPet: Pet, skill: Skill, damageResult: any): IEmbedProps {
    const elementColor = ELEMENT_COLORS[skill.element] || "#95a5a6";
    const elementEmoji = ELEMENT_EMOJIS[skill.element] || "";

    return {
        color: elementColor,
        title: `${SPECIES_EMOJIS[attackingPet.species] || "üêæ"} ${attackingPet.name} ƒë√£ s·ª≠ d·ª•ng ${skill.name} ${elementEmoji}`,
        description: `Lo·∫°i k·ªπ nƒÉng: ${skill.name}\nChi ph√≠ nƒÉng l∆∞·ª£ng: ${skill.energyCost || 0}\nS√°t th∆∞∆°ng: ${skill.damage || "Thay ƒë·ªïi"}`,
        fields: [
            {
                name: "üéØ K·∫øt qu·∫£ s√°t th∆∞∆°ng",
                value: `‚öîÔ∏è S√°t th∆∞∆°ng g√¢y ra: ${damageResult.damage}\nüí• Ch√≠ m·∫°ng: ${damageResult.isCrit ? "C√≥" : "Kh√¥ng"}\nüîÆ Hi·ªáu qu·∫£: ${damageResult.effectiveness}`,
                inline: true
            },
            {
                name: "üìä Ch·ªâ s·ªë chi·∫øn ƒë·∫•u",
                value: `‚ù§Ô∏è HP: ${attackingPet.hp}/${attackingPet.maxHp}\n‚ö°Ô∏è NƒÉng l∆∞·ª£ng: ${attackingPet.energy}/${attackingPet.maxEnergy}`,
                inline: true
            }
        ],
        footer: {
            text: `Y√™u c·∫ßu c·∫•p ƒë·ªô k·ªπ nƒÉng: ${skill.levelReq}`
        }
    };
}

// Get status effects string for display
function getStatusEffectsString(statusEffects: BattleStatus[]): string {
    if (statusEffects.length === 0) {
        return "Kh√¥ng c√≥";
    }

    return statusEffects.map(status => {
        const emoji = STATUS_EMOJIS[status.statusEffect.type] || "‚ùì";
        return `${emoji} ${status.statusEffect.type} (${status.turnsRemaining} l∆∞·ª£t)`;
    }).join("\n");
}